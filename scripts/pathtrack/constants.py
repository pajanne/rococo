'''
Created on Jun 09, 2010
by
@author: Anne Pajon (ap12)
Copyright (c) 2009 Wellcome Trust Sanger Institute. All rights reserved.
'''

from genepy import util

### ---------------------------------------------------------------------------
CATEGORY = ['eukaryote', 'helminth', 'metahit', 'prokaryote', 'virus']

DATABASE = {'eukaryote':'pathogen_euk_track',
            'helminth':'pathogen_helminth_track',
            'metahit':'pathogen_metahit_track',
            #'metahit':'track_metahit',
            'prokaryote':'pathogen_prok_track',
            'virus':'pathogen_virus_track'}

IS_LSF = util.isLsf()

QC_CONF_TEMPLATE = """
root    => '%(root)s/%(category)s/seq-pipelines/',
module  => 'VertRes::Pipelines::TrackQC_Fastq',
prefix  => '_',
log     => '%(root)s/log/%(category)s/%(project)s_qc.log',

max_failures => 3,  # How many repeated failures are allowed for a lane. 0 to unlimited.


db  =>
{
    database => '%(db)s',
    host     => '%(db_host)s',
    port     => %(db_port)s,
    user     => '%(db_rw_user)s',
    password => '%(db_password)s',
},


limits => {
    platform => ['454'],
    project => ['%(project)s'],
},


data => 
{
    # Uncomment this to clean everything (will delete the qc-sample directory).
    #clean=>1, mrProper=>1,

    # Uncomment this if the pipeline should run jobs with failed LSF jobs.
    exit_on_errors=>0,

    db  =>
    {
        database => '%(db)s',
        host     => '%(db_host)s',
        port     => %(db_port)s,
        user     => '%(db_rw_user)s',
        password => '%(db_password)s',
    },

    # The prefix to reference files, as required by bwa
    bwa_ref     => '%(ref)s',

    # The reference sequence in fasta format
    fa_ref      => '%(ref)s',

    # The index to fa_ref generated by samtools faidx
    fai_ref     => '%(ref)s.fai',

    # Some statistics of the reference sequence (used to create GC graph)
    stats_ref   => '%(ref)s.refstats',
   
    # The assembly and the mapper (required only with the VRTrack database)
    assembly       => 'NCBI36',
    mapper         => 'bwa',
    mapper_version => '0.5.5',

    bwa_exec       => '/software/vertres/bin/bwa-0.5.5',
    samtools       => '/software/vertres/bin/samtools',
    glf            => '/software/vertres/bin/glf',
    mapviewdepth   => '/software/vertres/bin/bindepth',

    # Detect adapters
    #adapters => '/software/pathogen/projects/protocols/ext/solexa-adapters.fasta',

    # Genotype file generated by hapmap2bin from glftools
    snps => '/lustre/scratch102/projects/g1k/ref/pilot/snps/hapmap3.snps.bin',

    gtype_confidence => 1.2,

    # Chromosome name regular expression
    chr_regex => '^(scaffold\d{5})',
},

"""

IMPORT_CONF_TEMPLATE = """
root    => '%(root)s/%(category)s/seq-pipelines/',
module  => 'PathTrack::ImportAssembly',
prefix  => '_',
log     => '%(root)s/log/%(category)s/%(project)s_import_assembly.log',

max_failures => 3,  # How many repeated failures are allowed for a lane. 0 to unlimited.


db  =>
{
    database => '%(db)s',
    host     => '%(db_host)s',
    port     => %(db_port)s,
    user     => '%(db_rw_user)s',
    password => '%(db_password)s',
},


limits => {
    platform => ['454'],
    project => ['%(project)s'],
},


data => 
{
    db  =>
    {
        database => '%(db)s',
        host     => '%(db_host)s',
        port     => %(db_port)s,
        user     => '%(db_rw_user)s',
        password => '%(db_password)s',
    },

    assembly_id => '%(assembly_id)s',
    contigs => '%(contig_file)s',
    scaffolds => '%(scaffold_file)s',	    
},

"""
### ---------------------------------------------------------------------------
