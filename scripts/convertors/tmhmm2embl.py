'''
Created on Aug 12, 2010
by
@author: Anne Pajon (ap12)
Copyright (c) 2009 Wellcome Trust Sanger Institute. All rights reserved.
'''

import os, sys, copy
import re
from Bio import SeqIO
from Bio.SeqRecord import SeqRecord
from Bio.SeqFeature import Reference, SeqFeature, FeatureLocation, ExactPosition, BeforePosition, AfterPosition
from optparse import OptionParser

### ---------------------------------------------------------------------------
SEQIDS = {}

### ---------------------------------------------------------------------------
### Main methods 
### ---------------------------------------------------------------------------
"""
# Alistipes_shahii_WAL8301_481_3516_CDS_1 -
Alistipes_shahii_WAL8301_481_3516_CDS_1	TMHMM2.0	outside	1	1012
# Alistipes_shahii_WAL8301_3497_4207_CDS_1 -
Alistipes_shahii_WAL8301_3497_4207_CDS_1	TMHMM2.0	outside	1	237
# Alistipes_shahii_WAL8301_4217_6052_CDS_1 -
Alistipes_shahii_WAL8301_4217_6052_CDS_1	TMHMM2.0	outside	1	612
"""
def convertToEmbl(file, embl_file, tab_file):

    new_features = []

    # read EMBL feature table
    record = SeqIO.read(open(embl_file), "embl")
    features = {}
    for i in range(len(record.features)):
        feature = record.features[i]
        if 'locus_tag' in feature.qualifiers.keys():
            features[feature.qualifiers['locus_tag'][0]] = feature
        if 'label' in feature.qualifiers.keys():
            features[feature.qualifiers['label'][0]] = feature

    # read tmhmm raw data & build-up results dictionary
    results = {}
    f_input = open (file, 'r')
    cds_cat = {}
    for line in f_input:
        line = line.strip()
        if line[0] == '#':
            continue
        values = line.split('\t')
        if len(values) == 0:
            continue
        if not len(values) == 5:
            continue
        cds_id = values[0] # Alistipes_shahii_WAL8301_481_3516_CDS_1
        program = values[1] # TMHMM2.0
        location = values[2] # outside
        start = int(values[3]) # 1
        end = int(values[4]) # 1012

        if cds_id in results.keys():
            results[cds_id].append("%s-%s" % (start, end))
        else:
            results[cds_id] = ["%s-%s" % (start, end)]

    for cds_id in results.keys():
        # find feature associated with this iprscan result line
        feature = features[SEQIDS[cds_id]]

        # add new misc_feature
        note = "%s probable transmembrane helix predicted for %s by %s at aa %s" % (len(results[cds_id]), SEQIDS[cds_id], program, results[cds_id])
        new_feature = copy.copy(feature)
        new_feature.type = 'misc_feature'
        new_feature.qualifiers = {}
        new_feature.qualifiers['colour'] = '0'
        new_feature.qualifiers['id'] = SEQIDS[cds_id]
        new_feature.qualifiers['label'] = program
        new_feature.qualifiers['note'] = note
        new_features.append(new_feature)
        
        # update EMBL feature table with TMHMM
        if 'note' in feature.qualifiers.keys():
            feature.qualifiers['note'] = "%s; %s" % (feature.qualifiers['note'], note)
        else:
            feature.qualifiers['note'] = note
        
        # replace existing feature by modified one
        features[SEQIDS[cds_id]] = feature

    # write new EMBL feature table
    new_features.extend(features.values())
    new_features.sort(feature_compare)
    record.features = new_features
    SeqIO.write([record], open(tab_file, "w"), "embl")

    # close files
    f_input.close()


### ---------------------------------------------------------------------------
def feature_compare(fx, fy):
    if int(fx.location.start.position) > int(fy.location.start.position):
        return 1
    elif int(fx.location.start.position) == int(fy.location.start.position):
        return 0
    else: 
        return -1


### ---------------------------------------------------------------------------
def readSeqIds(map):
    f_map = open(map, 'r')
    for line in f_map:
        line.strip()
        values = line.split()
        key = values[0][1:]
        value = values[2].split('"')[1]
        SEQIDS[key] = value
    f_map.close()
        

### ---------------------------------------------------------------------------
def doRun():
    usage = "usage: %prog [Options]"
    parser = OptionParser(usage=usage)
    parser.add_option("-i", metavar="FILE", help="TMHMM raw input FILE", action="store", type="string", dest="input")
    parser.add_option("-e", metavar="FILE", help="EMBL input FILE", action="store", type="string", dest="embl")
    parser.add_option("-o", metavar="FILE", help="modified EMBL FILE with TMHMM data added", action="store", type="string", dest="output")
    parser.add_option("-m", metavar="FILE", help="mapping FILE between EMBOSS and EMBL seq ids from description line of fasta file generated by extractfeat (e.g. extractfeat -sequence Ashahii_WAL8301.4dep.embl -type CDS -featinname Yes -describe locus_tag -stdout Yes -auto Yes | transeq -filter Yes -stdout Yes -auto Yes | grep '>' > Ashahii_WAL8301.seqids)", action="store", type="string", dest="map")
    (options, args) = parser.parse_args()

    if not (options.input and options.embl and options.output and options.map):
        parser.print_help()
        sys.exit()

    # Run the conversion 
    if os.path.exists(options.input):
        # Read mapping between EMBOSS ans EMBL seq ids - create a dictionary of mapping SEQIDS
        readSeqIds(options.map)
        # Convert output results into a feature table and add it to the original EMBL file
        convertToEmbl(options.input, options.embl, options.output)
        
if __name__ == '__main__':
    doRun()
